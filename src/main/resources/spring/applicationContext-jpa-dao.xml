<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-autowire="byName"><!--default-autowire="byName"-->

    <!-- 属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="nullValue" value="[null]" />
        <property name="locations">
            <list>
                <value>classpath*:appConfig.local.properties</value>
            </list>
        </property>
    </bean>
    <!--简单的配置方式-->
    <!--<context:property-placeholder location="classpath*:appConfig.local.properties"/>-->

    <!-- 添加数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
        <property name="driverClassName" value="${app.dataSource.driver}" />
        <property name="url" value="${app.dataSource.driverUrl}" />
        <property name="username" value="${app.dataSource.username}" />
        <property name="password" value="${app.dataSource.password}" />
        <property name="maxActive" value="${app.dataSource.maxConnectionCount}" />
        <property name="maxIdle" value="${app.dataSource.minConnectionCount}"/>
        <property name="maxWait" value="3000"/>
        <property name="defaultAutoCommit">
            <value>false</value>
        </property>
    </bean>

    <!-- 配置会话工厂，连接 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
                 <property  name="dataSource"  ref="dataSource"/>
                 <property  name="packagesToScan"  value="com.zhong.module.*.domain"/>
                 <property  name="persistenceProvider">
                     <bean  class="org.hibernate.ejb.HibernatePersistence"/>
                 </property>
                 <property  name="jpaVendorAdapter">
                            <bean  class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">    
                                    <property  name="generateDdl"  value="false"/>    
                                    <property  name="database"  value="MYSQL"/>    
                                    <property  name="databasePlatform"  value="org.hibernate.dialect.MySQL5InnoDBDialect"/>    
                                    <property  name="showSql"  value="true"/>    
                            </bean>    
                 </property>
                    <property  name="jpaDialect">
                            <bean  class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
                    </property>
                    <property  name="jpaPropertyMap">
                            <map>
                            <entry  key="hibernate.query.substitutions"  value="true  1,  false  0"/>
                            <entry  key="hibernate.default_batch_fetch_size"  value="16"/>
                            <entry  key="hibernate.max_fetch_depth"  value="2"/>
                            <entry  key="hibernate.generate_statistics"  value="true"/>
                            <entry  key="hibernate.bytecode.use_reflection_optimizer"  value="true"/>
                            <entry  key="hibernate.cache.use_second_level_cache"  value="false"/>
                            <entry  key="hibernate.cache.use_query_cache"  value="false"/>
                    </map>
                    </property>
                     </bean>  

    <!--激活事务 以 @Transactional 标注来定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"  />

    <!--事件管理器-->
    <bean id="transactionManager"  class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"></property>
    </bean>

    <!-- 组件扫描 dao -->
    <!--<context:component-scan base-package="com.zhong.module.*.repository"/>-->
    <jpa:repositories  base-package="com.zhong.module.*.repository"
                       repository-impl-postfix="Impl"
                       entity-manager-factory-ref="entityManagerFactory"
                       transaction-manager-ref="transactionManager">
        <!--<repository:exclude-filter type="assignable" expression="com.zhong.commons.base.IBaseRepository"></repository:exclude-filter>-->
    </jpa:repositories>

    <!-- 组件扫描 service -->
    <context:component-scan base-package="com.zhong.module.*.service"/>
    <!--<bean id="testService" class="com.zhong.module.test.service.TestService" autowire="constructor"></bean>-->

    <!--@Aspect风格的 注解配置 aop-->
    <!-- 启用注解自动代理@Aspect  将一个类变成切面 和<aop:advisor>元素一样
        @Aspect 注解和<aop:advisor>元素区别：
        @Aspect需要添加到类上，需要源码，而<aop:advisor>元素则可以添加任意类上（jar包上的类）
    -->
    <!--<aop:aspectj-autoproxy />-->
    <!--相当于注册了java:org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator（注解的aspectJ自动代理创建类）-->

    <!-- 组件扫描 aop -->
    <!--<context:component-scan base-package="com.zhong.module.*.aop" />-->


</beans>